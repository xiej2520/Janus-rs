use crate::util::KeyValue;

use std::time::Duration;

// called once for each file of input
pub fn map(filename: &str, _contents: &str) -> Vec<KeyValue> {
    vec![KeyValue::new(filename.to_owned(), "1".to_owned())]
}

// reduce is called once for each key generated by the map tasks, with a list of
// all the values created for that key by any map task
pub fn reduce(key: &str, values: Vec<&str>) -> String {
    // some reduce tasks will sleep for a long time, potentially seeing if a
    // worker will accidentally exit early
    if key.contains("sherlock") || key.contains("tom") {
        std::thread::sleep(Duration::from_secs(3));
    }
    
    // return number of occurences of this file
    format!("{}", values.len())
}
